#!/usr/bin/env python
# -*- coding: utf-8 -*-

from os import statvfs
from os.path import ismount, basename
from socket import gethostname
from time import time
from argparse import ArgumentParser
from collections import namedtuple
from re import compile


_disk_usage = namedtuple('Usage', 'total used free')


class DeviceError(Exception):
    pass


class Device(object):
    def __init__(self, path):
        self.path = path
        self._status = self.statvfs(path)

    @staticmethod
    def statvfs(path):
        if ismount(path):
            try:
                return statvfs(path)
            except OSError as error:
                raise DeviceError(error)
        else:
            raise DeviceError('Path "{}" is not mount point'.format(path))

    @property
    def free(self):
        return self._status.f_bavail*self._status.f_frsize

    @property
    def total(self):
        return self._status.f_blocks*self._status.f_frsize

    @property
    def used(self):
        return (self._status.f_blocks-self._status.f_bfree)*self._status.f_frsize

    def usage(self):
        return _disk_usage(self.total, self.used, self.free)


def main(prefix=None, pattern=r''):
    timestamp = int(time())
    tpl = '{prefix}.usage.{device}.{key} {value} {timestamp}'
    re_path = compile(pattern)

    with open('/etc/mtab') as f:
        while True:
            try:
                line = f.next()
            except StopIteration:
                break

            name, mount_point = line.split()[:2]

            if re_path.search(mount_point):
                try:
                    device = Device(mount_point)
                except DeviceError:
                    continue

                for key, value in device.usage()._asdict().iteritems():
                    print(tpl.format(prefix=prefix,
                                     device=basename(name),
                                     key=key,
                                     value=value,
                                     timestamp=timestamp))


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('--scheme', default=gethostname(), help='Metric naming scheme (default: %(default)s)')
    parser.add_argument('--pattern', default=r'/cdn/storage/', help='Search pattern')
    args = parser.parse_args()
    main(prefix=args.scheme, pattern=r''+args.pattern)
