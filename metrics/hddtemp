#!/usr/bin/env python
# -*- coding: utf-8 -*-

from socket import gethostname, socket, AF_INET, SOCK_STREAM
from time import time
from argparse import ArgumentParser
from re import compile

DEV = compile(r'\|/dev/(?P<device>[^|]+)\|(?P<name>[^|]+)\|(?P<value>[0-9]+)\|C\|')


def fetch(host=None, port=None):
    received_data = ''

    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(30)

    try:
        s.connect((host or 'localhost', port or 7634))

        while True:
            data = s.recv(1024)
            if not data:
                break
            received_data += data
    except:
        pass

    s.close()

    return DEV.finditer(received_data)


def main(scheme=None, **kwargs):
    timestamp = int(time())
    tpl = '{prefix}.hddtemp.{device} {value} {timestamp}'

    for item in fetch(**kwargs):
        print(tpl.format(prefix=scheme, timestamp=timestamp, **item.groupdict()))


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('--scheme', default=gethostname(), help='Metric naming scheme (default: %(default)s)')
    parser.add_argument('--host', default='localhost', help='Socket HOST (default: %(default)s)')
    parser.add_argument('--port', default=7634, help='Socket PORT (default: %(default)s)')
    args = parser.parse_args()
    main(scheme=args.scheme, host=args.host, port=args.port)
