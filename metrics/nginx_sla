#!/usr/bin/env python
# -*- coding: utf-8 -*-

from requests import get, codes
from requests.exceptions import ConnectionError
from socket import gethostname
from time import time
from argparse import ArgumentParser
from re import compile


def replace_ip_addr(match):
    addr = match.group()
    return addr.replace('.', '_').replace(':', '_')


def replace_aggregate(match):
    return 'aggregated.'+match.group('timing')


def replace_percentile(match):
    return 'percentile.'+match.group('percentile')


def replace_http_code(match):
    return 'response.'+match.group('code')


regex_group = {
    replace_ip_addr: compile(r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]{1,4}'),
    replace_aggregate: compile(r'(?P<timing>[0-9]+|inf)\.agg$'),
    replace_percentile: compile(r'(?P<percentile>[0-9]+)%$'),
    replace_http_code: compile(r'http_(?P<code>[0-9x]+)$'),
}


def normalize(value):
    for handler, regex in regex_group.iteritems():
        value = regex.sub(handler, value)

    if value.endswith('avg'):
        value = value.replace('avg', 'average')

    if value.endswith('http'):
        value = value.replace('http', 'response.known_total')

    return value.replace('avg.mov', 'moving_average').replace('inf', 'infinite')


def nginx_sla_parser(text):
    for line in text.splitlines():
        key, value = line.split(' = ')
        yield normalize(key), value


def main(scheme=None, fqdn=None, host=None, https=False, status_uri=None, purge_uri=None):
    tpl = '{prefix}.nginx_sla.{key} {value} {timestamp}'
    http_scheme = 'https' if https else 'http'
    url_tpl = http_scheme+'://{fqdn}/{action}'

    try:
        request_status = get(url_tpl.format(fqdn=fqdn, action=status_uri))
        request_purge = get(url_tpl.format(fqdn=fqdn, action=purge_uri))
    except ConnectionError as error:
        raise SystemExit(error)
    else:
        timestamp = int(time())
        if request_status.status_code == codes.ok:
            for key, value in nginx_sla_parser(request_status.text):
                print(tpl.format(prefix=scheme,
                                 key=key,
                                 value=value,
                                 timestamp=timestamp))


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('--scheme', default=gethostname(), help='Metric naming scheme (default: %(default)s)')
    parser.add_argument('--fqdn',  default='localhost', help='Server FQDN (default: %(default)s)')
    parser.add_argument('--host', help='HTTP host')
    parser.add_argument('--https', action='store_true', help='Use HTTPS protocol')
    parser.add_argument('--status-uri', metavar='URI', default='sla_status', help='Status URI (default: %(default)s)')
    parser.add_argument('--purge-uri', metavar='URI', default='sla_purge', help='Purge URI (default: %(default)s)')
    args = parser.parse_args()
    main(**vars(args))
